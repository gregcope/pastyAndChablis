AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  RootDomainName:
    Default: pastyandchablis.com
    Description: Domain name for your website (pastyandchablis.com)
    Type: String

  EmailFrom:
    Description: Email address used to send email FROM with SES
    Type: String
    Default: order@pastyandchablis.com

  EmailTo:
    Description: Email address used to send email TO with SES
    Type: String

Resources:

  LambdaOrderFunction:

    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          # import libs
          import boto3
          import json

          # handle api call
          def handler(event, context):
            response = {
              'isBase64Encoded': False,
              'statusCode': 200,
              'headers': {},
              'multiValueHeaders': {},
              'body': 'Hello, World!'
            }
            return response
      Description: AWS Lambda function to SES email and store in DynamDB
      FunctionName: 'lambdaOrder'
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaOrderIamRole.Arn
      Runtime: python3.8
      Timeout: 60

  LambdaOrderIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'

      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "arn:aws:logs:*:*:*"

        - PolicyName: sendEmails
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - "ses:SendEmail"
                - "ses:SendRawEmail"
              Resource: "*"
              Condition:
                StringEquals:
                  "ses:FromAddress":
                    Ref: EmailFrom

        - PolicyName: saveOrders
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                 - "dynamodb:PutItem"
              Resource: "*"


  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaOrderFunction.Arn

