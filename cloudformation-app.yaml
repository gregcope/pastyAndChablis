AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  RootDomainName:
    Default: pastyandchablis.com
    Description: Domain name for your website (pastyandchablis.com)
    Type: String

  EmailFrom:
    Description: Email address used to send email FROM with SES
    Type: String
    Default: order@pastyandchablis.com

  EmailTo:
    Description: Email address used to send email TO with SES
    Type: String

  OrderReadCapacityUnits:
    Description: DynamoDB Order table Read Capacity Units
    Type: Number
    Default: 1

  OrderWriteCapacityUnits:
    Description: DynamoDB Order table Write Capacity Units
    Type: Number
    Default: 1

  APIGatewayPathPart:
    Description: API Gateway PathPart hack (because you cannot extract it
    Type: String
    Default: lambda

Resources:

  LambdaOrderFunction:

    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          # import libs
          import boto3
          import json
          import uuid
          import datetime

          dynamodb = boto3.resource('dynamodb')

          # handle api call
          def handler(event, context):

            fname = 'greg'
            date = '1900'

            #body = '<html><head><title>pastyandchablis.com</title></head><body><h1> ' + str(name) + ', thank you for your order!</h1><p>Our grumpy French chef and Sous Chef and MaitreD will now consider processing your order!</p><a href=https://www.pastyandchablis.com/index.html>Back to menu / Order another</a></body>'
            body = "<html><head><title>pastyandchablis.com</title></head><body><h1> {}, thank you for your order on {}!</h1><p>Our grumpy French chef and Sous Chef and MaitreD will now consider processing your order!</p><a href=https://www.pastyandchablis.com/index.html>Back to menu / Order another</a></body>".format(fname, date)

            response = {
              'isBase64Encoded': False,
              'statusCode': 200,
              'headers': { 'Content-Type': 'text/html' },
              'multiValueHeaders': {},
              'body': str(body)
            }
            return response

      Description: AWS Lambda function to SES email and store in DynamDB
      FunctionName: 'lambdaOrder'
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaOrderIamRole.Arn
      Runtime: python3.8
      Timeout: 60

  LambdaOrderIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'

      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "arn:aws:logs:*:*:*"

        - PolicyName: sendEmails
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - "ses:SendEmail"
                - "ses:SendRawEmail"
              Resource: "*"
              Condition:
                StringEquals:
                  "ses:FromAddress":
                    Ref: EmailFrom

        - PolicyName: saveOrders
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                 - "dynamodb:PutItem"
              Resource: !GetAtt CustomerInfo.Arn


  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaOrderFunction.Arn

  CustomerInfo:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: orders
      KeySchema:
        - AttributeName: orderName
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: orderName
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref 'OrderReadCapacityUnits'
        WriteCapacityUnits: !Ref 'OrderWriteCapacityUnits'

  ApiGatewayOrderRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway for the LambdaOrderFunction
      EndpointConfiguration:
        Types:
          - EDGE
      Name: OrderAPI

  ApiGatewayOrderResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayOrderRestApi.RootResourceId
      PathPart: !Ref APIGatewayPathPart
      RestApiId: !Ref ApiGatewayOrderRestApi

  ApiGatewayOrderMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaOrderFunction.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayOrderResource
      RestApiId: !Ref ApiGatewayOrderRestApi

  ApiGatewayOrderModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayOrderRestApi
      Schema: {}

  ApiGatewayOrderStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayOrderDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayOrderRestApi
      StageName: 'v0'

  ApiGatewayOrderDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayOrderMethod
    Properties:
      Description: Order Lambda API Deployment
      RestApiId: !Ref ApiGatewayOrderRestApi

Outputs:
  ApiUrl:
    Description: URI of Order API endpoint
    Value: !Sub https://${ApiGatewayOrderRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayOrderStage}/${APIGatewayPathPart}
